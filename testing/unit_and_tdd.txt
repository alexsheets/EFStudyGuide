.NET Core Unit Testing Notes
=========================================================================

--> unit test: 
    - exercises individual software components or methods, also known as a
    unit of work
    - should only test code within developers control
        - dont test infrastructure concerns (interacting with db, file systems)

--> integration tests:
    - differs from unit test in that it exercises two or more software components
    ability to function together, or their integration
    - operate on broader spectrum and often include infrastructure concerns

=========================================================================

UNIT TESTING:
    
    - most commonly used testing frameworks are xUnit, NUnit, MSUnit, Moq
        - xunit: focuses on simplicity and ease of use
        - nunit: rich feature set and extensive plugin ecosystem
        - mstest: default testing framework provided by VS
        - moq: mocking library specifically for .NET, allowing to create
        mock objects for isolated testing 
    - automated, self-contained and focused on specific aspects of a unit
    - advantages:
        - ensures functionality
        - enhances maintainability
        - accelerates development 
        - facilitates collaboration

=========================================================================

TEST DRIVEN DEVELOPMENT:
    
    - powerful approach to building robust software
    - used to write tests BEFORE we start implementation
        - before starting, list reqs need to be fulfilled in application

    - take first requirement, write failing test -- the test should describe
    what we should do, so we need to write necessary code to make test pass
    - after done with first requirement completely, you can continue with next
    requirement. meaning you iterate entire cycle (red -> green -> refactor)

    - advantages:
        - makes you think about needed API in beginning; such as classes, properties
        and APIs needed
        - makes you think about what code should do rather than how it should be done
        - get quick feedback about requirements by running tests
        - helps to create modular code
        - leads to maintainable codebase