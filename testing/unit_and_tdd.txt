.NET Core Unit Testing Notes
=========================================================================

--> unit test: 
    - exercises individual software components or methods, also known as a
    unit of work
    - should only test code within developers control
        - dont test infrastructure concerns (interacting with db, file systems)

--> integration tests:
    - differs from unit test in that it exercises two or more software components
    ability to function together, or their integration
    - operate on broader spectrum and often include infrastructure concerns

=========================================================================

UNIT TESTING:
    
    - most commonly used testing frameworks are xUnit, NUnit, MSUnit, Moq
        - xunit: focuses on simplicity and ease of use
        - nunit: rich feature set and extensive plugin ecosystem
        - mstest: default testing framework provided by VS
        - moq: mocking library specifically for .NET, allowing to create
        mock objects for isolated testing 
    - automated, self-contained and focused on specific aspects of a unit
    - advantages:
        - ensures functionality
        - enhances maintainability
        - accelerates development 
        - facilitates collaboration

    - anatomy of a well-structured test:
        - arrange: set up test env and instantiate system under test or its
        dependencies
        - act: invoke the target method using the prepared env
        - assert: check if expected outcome equals actual result

    - xunit attributs, conventions, execution:
        - fact: attribute which indicates a method which is a test case. method
        should have no return type or input params
        - theory: attribute which signifies a data-driven test method, allows
        multiple inputs, each of which results in separate test execution
        - inlinedata: attribute which provides inline data for theory tests, 
        simplifying data mgmt
        - memberdata: allows sharing data across test methods by specifying a 
        member from which to pull test data
    
    - moq: 
        - powerful mocking library that provides simple and intuitive API 
        for creating and managing mock objects
        - key features:
            - strong typing: leverages C# strong typing, providing compile-time
            checking of mocked methods calls and behavior
            - expressive API: moq API designed to be expressive and easy to use
            - linq querying
            - integration: works seamlesslyt with frameworks like xunit

=========================================================================

TEST DRIVEN DEVELOPMENT:
    
    - powerful approach to building robust software
    - used to write tests BEFORE we start implementation
        - before starting, list reqs need to be fulfilled in application

    - take first requirement, write failing test -- the test should describe
    what we should do, so we need to write necessary code to make test pass
    - after done with first requirement completely, you can continue with next
    requirement. meaning you iterate entire cycle (red -> green -> refactor)

    - advantages:
        - makes you think about needed API in beginning; such as classes, properties
        and APIs needed
        - makes you think about what code should do rather than how it should be done
        - get quick feedback about requirements by running tests
        - helps to create modular code
        - leads to maintainable codebase