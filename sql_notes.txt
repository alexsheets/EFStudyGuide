CONCEPTS:
==========================================================================================

--> keys:

    - primary key: unique identifier for each record in table. ensures no two rows have same value
    in primary key columns 
        - DOES NOT HAVE nulls
        - can create joint PK, but can only have ONE pk in table

    - unique key: 
        - can have nulls
        - can have one or many unique keys in a table

    - foreign key: column or set of columns in a table that refers to the primary key of another.
    establishes and enforces relationship between the two tables

==========================================================================================

--> cte: common table expression

    - temporary result set that can be referenced with any common statement;
        SELECT, INSERT, UPDATE or DELETE
    - used to simplify complex queries into smaller, more manageable parts
    - syntax:
        WITH cte_name (column1, column2, ...) AS (
            SELECT ...
            FROM ...
            WHERE ...
        )
        - cte_name: name of CTE, used to reference
        - the column parameters are optional list of column names for CTE
        - select, from and where are all just examples of the query that can be 
        defined in the CTE
    - example:
        WITH Supervisors AS (
            SELECT e.employee_id, e.employee_name, s.supervisor_name
            FROM employees e
            LEFT JOIN employees s ON e.supervisor_id = s.employee_id
        )
        SELECT employee_id, employee_name, supervisor_name
        FROM Supervisors;
        
        - in the example we query employees table for the supervisor's name by
        using their ID and then return a table which shows the employee id and name
        and supervisor name

--> window functions:
    - SQL functions which can perform calculations across a set of rows related to current row
        - examples:
            - ROW_NUMBER()
            - RANK()
            - NTILE()
        - commonly used for analytical tasks like ranking or partitioning data

--> view:
    - virtual table created by SELECT query. does not store data itself, but presents data from
    one or more tables in structured way.
    - simplify complex queries and enhance security

--> cursor
    - db object used to retrieve, manipulate and traverse through rows in a result set
    one row at a time. cursors are helpful when performing operations tht must be processed
    sequentially

==========================================================================================

--> all kinds of joins

    - join: used to combine rows from two or more tables, based on related column
    between them

    - inner join: returns all records that have matching values in both tables
    --> SELECT columns FROM table1 INNER JOIN table2 ON table1.column = table2.column;

    - left outer join: returns all records from left table and matched records from 
    right table
    --> SELECT columns FROM table1 LEFT JOIN table2 ON table1.column = table2.column;

    - right outer join: returns all records from right table and matched records from
    left table
    --> SELECT columns FROM table1 RIGHT JOIN table2 ON table1.column = table2.column;

    - full outer join: returns all records where there is match in either left or right
    --> SELECT columns FROM table1 FULL OUTER JOIN table2 ON table1.column = table2.column WHERE condition;

    --> inner joins return only matching rows from both tables, OUTER join returns all rows
    from at least one of the tables, including unmatched rows

==========================================================================================

--> stored procedures/functions: 

    - stored procedure: precompiled collection of SQL statements stored in database and can be
    executed by calling its name.
    - function: precompiled SQL statement which returns single value, used in queries
    - advantages of stored procedures:
        - improved performance
        - enhanced security 
        - reduced network traffic
        - better code modularity

==========================================================================================

--> indexes:

    - INCREASE search performance
    - database object which improves speed of data retrieval operations on a table. allows SQL
    queries to quickly locate rows based on indexed column values
        - clustered index: determines physical order of rows in table
        - nonclustered index: does not affect physical order of rows but improves query performance
        by creating a separate data structure

==========================================================================================

--> backups, normalization, migrations, optimization etc:
    
    == backups
    - SQL servers support several types of backups: full backups, differential backups, 
    transaction log backups, and file/filegroup backups
    - to restore a database in SQL, use RESTORE DATABASE command, specifying backup file
    and options such as WITH REPLACE or WITH RECOVERY

    == optimization/performance tuning
    - performance tuning involves various tools/techs such as query optimization, index 
    tuning, db design optimization, and server config tuning
    - query optimization involves restructuring queries to improve performance; can be done
    via using indexing, rewriting queries, avoiding unnecessary joins, etc.

    == normalization
    - process of organizing data in a rdb to reduce redundancy or dependency. improves data
    integrity, reduces storage space, enhances query performance
    - different norms:
        - 1NF: first normal form
            - columns have atomic values; no repreating groups
        - 2NF: second normal form
            - eliminate partial dependencies
            - requires table to be in 1NF and ensures all non-key attrs are fully dependent on 
            primary key
        - 3NF: third normal form
            - eliminate transitive dependencies
            - requires table to be in 2NF and ensures again that all non-key attrs are directly
            dependent on the primary key and not any other non-key attribute
        - BCNF: boyce codd normal form
    - denormalization: combining normalized tables into larger tables for performance reasons.
    used when complex queries and joins slow down data retrieval
    
    == migrations
    - data migration can be performed using various methods like backup/restore, detach/attach,
    import/export wizard, or sql server integration services
    - SSIS is powerful ETL tool provided for building data integration and workflow solutions

==========================================================================================

--> different clauses:

    - groupby: used to arrange identical data into groups. typically used with aggregate functions
    like COUNT, SUM, or AVG to perform calculations on each groupby

    - order by: sorts result set of query in either ascending or descending order based on one 
    or more columns

    - having: filters data after groupby clause has grouped it. filters rows based on a specific
    condition and is typically used with agg functions

    - where: filters rows from a table based on specified conditions before data retrieved

    - top: retrieves a specified number of rows from result set
    
    - with: also known as CTE; creates temporary result set, can be referenced with SQL query 
    to simplify complex queries

    - like: used w/ wilcard characters for pattern matching

==========================================================================================

--> other questions/concepts:

1. difference between char and varchar and nchar?
    - char only takes a fixed length; say in char(3), can take US or IND and it is valid
    - varchar can vary. say we define varchar(10), if length is shorter, we only take that length
        - variable length
    - nchar can also store non-english/unicode 